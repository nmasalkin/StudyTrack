package ru.vsu.cs.masalkin.service.impl;

import lombok.extern.log4j.Log4j;
import org.springframework.stereotype.Service;
import org.telegram.telegrambots.meta.api.methods.send.SendMessage;
import org.telegram.telegrambots.meta.api.methods.updatingmessages.EditMessageText;
import org.telegram.telegrambots.meta.api.objects.Update;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.InlineKeyboardMarkup;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.buttons.InlineKeyboardButton;
import ru.vsu.cs.masalkin.service.MainService;
import ru.vsu.cs.masalkin.service.ProducerService;

import java.util.ArrayList;
import java.util.List;

import static ru.vsu.cs.masalkin.service.enums.ServiceCommands.*;

@Service
@Log4j
public class MainServiceImpl implements MainService {

    private final ProducerService producerService;

    public MainServiceImpl(ProducerService producerService) {
        this.producerService = producerService;
    }

    public void processTextMessage(Update update) {
        var text = update.getMessage().getText();

        if (START.equals(text)) {
            startProcess(update.getMessage().getChatId());
            log.debug("Start command received " + update);
        } else if (MENU.equals(text)) {
            menuProcess(update.getMessage().getChatId());
            log.debug("Menu command received " + update);
        } else {
            log.error("Unknown command " + text);
            var output = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞";
            sendAnswer(output, update.getMessage().getChatId());
        }
    }

    @Override
    public void processCallbackMessage(Update update) {
        var data = update.getCallbackQuery().getData();

        if (START.equals(data)) {
            startProcess(update.getCallbackQuery().getMessage().getChatId(), update.getCallbackQuery().getMessage().getMessageId());
            log.debug("Start command received " + update);
        } else if (REGISTRATION.equals(data)) {
            registrationProcess(update.getCallbackQuery().getMessage().getChatId(), update.getCallbackQuery().getMessage().getMessageId());
        } else if (ABOUT_BOT.equals(data)) {
            aboutBotProcess(update.getCallbackQuery().getMessage().getChatId(), update.getCallbackQuery().getMessage().getMessageId());
        } else if (MENU.equals(data)) {
            menuProcess(update.getCallbackQuery().getMessage().getChatId(), update.getCallbackQuery().getMessage().getMessageId());
        } else if (SEMESTER_LIST.equals(data)) {
            chooseSemesterProcess(update.getCallbackQuery().getMessage().getChatId(), update.getCallbackQuery().getMessage().getMessageId());
        } else if (TOGGLE_NOTIFICATION.equals(data)) {
            toggleNotificationProcess(update.getCallbackQuery().getMessage().getChatId(), update.getCallbackQuery().getMessage().getMessageId());
        } else if (data.contains("/semester")) {
            semesterProcess(Integer.parseInt(data.replace("/semester_", "")), update.getCallbackQuery().getMessage().getChatId(), update.getCallbackQuery().getMessage().getMessageId());
        } else {
            log.error("Unknown command " + data);
            sendAnswer("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞", update.getCallbackQuery().getMessage().getChatId());
        }
    }

    private void sendAnswer(String output, Long chatId) {
        var sendMessage = new SendMessage();
        sendMessage.setChatId(chatId);
        sendMessage.setText(output);
        producerService.produceAnswer(sendMessage);
    }

    private void startProcess(Long chatId) {
        var sendMessage = new SendMessage();
        sendMessage.setChatId(chatId);
        sendMessage.setText("üëã–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é! –î–ª—è —Ç–æ–≥–æ —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –¥–∞–Ω–Ω—ã–º –±–æ—Ç–æ–ºü§ñ, –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–æ–π—Ç–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—éüòÅ");

        InlineKeyboardMarkup markupInline = new InlineKeyboardMarkup();
        List<List<InlineKeyboardButton>> listOfButtons = new ArrayList<>();

        List<InlineKeyboardButton> lineOfButtons1 = new ArrayList<>();
        InlineKeyboardButton inlineKeyboardButton1 = new InlineKeyboardButton();
        inlineKeyboardButton1.setText("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è");
        inlineKeyboardButton1.setCallbackData("/registration");
        lineOfButtons1.add(inlineKeyboardButton1);

        List<InlineKeyboardButton> lineOfButtons2 = new ArrayList<>();
        InlineKeyboardButton inlineKeyboardButton2 = new InlineKeyboardButton();
        inlineKeyboardButton2.setText("–ß—Ç–æ –º–æ–∂–µ—Ç –±–æ—Ç?");
        inlineKeyboardButton2.setCallbackData("/about_bot");
        lineOfButtons2.add(inlineKeyboardButton2);

        listOfButtons.add(lineOfButtons1);
        listOfButtons.add(lineOfButtons2);

        markupInline.setKeyboard(listOfButtons);
        sendMessage.setReplyMarkup(markupInline);

        producerService.produceAnswer(sendMessage);
    }

    private void startProcess(Long chatId, Integer messageId) {
        var editMessageText = new EditMessageText();
        editMessageText.setChatId(chatId);
        editMessageText.setMessageId(messageId);
        editMessageText.setText("üëã–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é! –î–ª—è —Ç–æ–≥–æ —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –¥–∞–Ω–Ω—ã–º –±–æ—Ç–æ–ºü§ñ, –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–æ–π—Ç–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—éüòÅ");

        InlineKeyboardMarkup markupInline = new InlineKeyboardMarkup();
        List<List<InlineKeyboardButton>> listOfButtons = new ArrayList<>();

        List<InlineKeyboardButton> lineOfButtons1 = new ArrayList<>();
        InlineKeyboardButton inlineKeyboardButton1 = new InlineKeyboardButton();
        inlineKeyboardButton1.setText("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è");
        inlineKeyboardButton1.setCallbackData("/registration");
        lineOfButtons1.add(inlineKeyboardButton1);

        List<InlineKeyboardButton> lineOfButtons2 = new ArrayList<>();
        InlineKeyboardButton inlineKeyboardButton2 = new InlineKeyboardButton();
        inlineKeyboardButton2.setText("–ß—Ç–æ –º–æ–∂–µ—Ç –±–æ—Ç?");
        inlineKeyboardButton2.setCallbackData("/about_bot");
        lineOfButtons2.add(inlineKeyboardButton2);

        listOfButtons.add(lineOfButtons1);
        listOfButtons.add(lineOfButtons2);

        markupInline.setKeyboard(listOfButtons);
        editMessageText.setReplyMarkup(markupInline);

        producerService.produceEditAnswer(editMessageText);
    }

    private void registrationProcess(Long chatId, Integer messageId) {
        var editMessageText = new EditMessageText();
        editMessageText.setChatId(chatId);
        editMessageText.setMessageId(messageId);
        editMessageText.setText("–í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞");

        InlineKeyboardMarkup markupInline = new InlineKeyboardMarkup();
        List<List<InlineKeyboardButton>> listOfButtons = new ArrayList<>();

        List<InlineKeyboardButton> lineOfButtons = new ArrayList<>();
        InlineKeyboardButton inlineKeyboardButton = new InlineKeyboardButton();
        inlineKeyboardButton.setText("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –Ω–∞—á–∞–ª–æ");
        inlineKeyboardButton.setCallbackData("/start");
        lineOfButtons.add(inlineKeyboardButton);
        listOfButtons.add(lineOfButtons);

        markupInline.setKeyboard(listOfButtons);
        editMessageText.setReplyMarkup(markupInline);

        producerService.produceEditAnswer(editMessageText);
    }

    private void aboutBotProcess(Long chatId, Integer messageId) {
        var editMessageText = new EditMessageText();
        editMessageText.setChatId(chatId);
        editMessageText.setMessageId(messageId);
        editMessageText.setText("–î–∞–Ω–Ω—ã–π –±–æ—Ç —Å–æ–∑–¥–∞–Ω –¥–ª—è —É–¥–æ–±–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –æ—Ü–µ–Ω–æ–∫ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤");

        InlineKeyboardMarkup markupInline = new InlineKeyboardMarkup();
        List<List<InlineKeyboardButton>> listOfButtons = new ArrayList<>();

        List<InlineKeyboardButton> lineOfButtons = new ArrayList<>();
        InlineKeyboardButton inlineKeyboardButton = new InlineKeyboardButton();
        inlineKeyboardButton.setText("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –Ω–∞—á–∞–ª–æ");
        inlineKeyboardButton.setCallbackData("/start");
        lineOfButtons.add(inlineKeyboardButton);
        listOfButtons.add(lineOfButtons);

        markupInline.setKeyboard(listOfButtons);
        editMessageText.setReplyMarkup(markupInline);

        producerService.produceEditAnswer(editMessageText);
    }

    private void menuProcess(Long chatId) {
        var sendMessage = new SendMessage();
        sendMessage.setChatId(chatId);
        sendMessage.setText("–í—ã–±–µ—Ä–∏—Ç–µ –∂–µ–ª–∞–µ–º–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ");

        InlineKeyboardMarkup markupInline = new InlineKeyboardMarkup();
        List<List<InlineKeyboardButton>> listOfButtons = new ArrayList<>();

        List<InlineKeyboardButton> lineOfButtons1 = new ArrayList<>();
        InlineKeyboardButton inlineKeyboardButton1 = new InlineKeyboardButton();
        inlineKeyboardButton1.setText("–°–ø–∏—Å–æ–∫ —Å–µ–º–µ—Å—Ç—Ä–æ–≤");
        inlineKeyboardButton1.setCallbackData("/semester_list");
        lineOfButtons1.add(inlineKeyboardButton1);
        listOfButtons.add(lineOfButtons1);

        List<InlineKeyboardButton> lineOfButtons2 = new ArrayList<>();
        InlineKeyboardButton inlineKeyboardButton2 = new InlineKeyboardButton();
        inlineKeyboardButton2.setText("–í–∫–ª/–≤—ã–∫–ª —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è");
        inlineKeyboardButton2.setCallbackData("/toggle_notification");
        lineOfButtons2.add(inlineKeyboardButton2);
        listOfButtons.add(lineOfButtons2);

        markupInline.setKeyboard(listOfButtons);
        sendMessage.setReplyMarkup(markupInline);

        producerService.produceAnswer(sendMessage);
    }

    private void menuProcess(Long chatId, Integer messageId) {
        var editMessageText = new EditMessageText();
        editMessageText.setChatId(chatId);
        editMessageText.setMessageId(messageId);
        editMessageText.setText("–í—ã–±–µ—Ä–∏—Ç–µ –∂–µ–ª–∞–µ–º–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ");

        InlineKeyboardMarkup markupInline = new InlineKeyboardMarkup();
        List<List<InlineKeyboardButton>> listOfButtons = new ArrayList<>();

        List<InlineKeyboardButton> lineOfButtons1 = new ArrayList<>();
        InlineKeyboardButton inlineKeyboardButton1 = new InlineKeyboardButton();
        inlineKeyboardButton1.setText("–°–ø–∏—Å–æ–∫ —Å–µ–º–µ—Å—Ç—Ä–æ–≤");
        inlineKeyboardButton1.setCallbackData("/semester_list");
        lineOfButtons1.add(inlineKeyboardButton1);
        listOfButtons.add(lineOfButtons1);

        List<InlineKeyboardButton> lineOfButtons2 = new ArrayList<>();
        InlineKeyboardButton inlineKeyboardButton2 = new InlineKeyboardButton();
        inlineKeyboardButton2.setText("–í–∫–ª/–≤—ã–∫–ª —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è");
        inlineKeyboardButton2.setCallbackData("/toggle_notification");
        lineOfButtons2.add(inlineKeyboardButton2);
        listOfButtons.add(lineOfButtons2);

        markupInline.setKeyboard(listOfButtons);
        editMessageText.setReplyMarkup(markupInline);

        producerService.produceEditAnswer(editMessageText);
    }

    private void chooseSemesterProcess(Long chatId, Integer messageId) {
        var editMessage = new EditMessageText();
        editMessage.setChatId(chatId);
        editMessage.setMessageId(messageId);
        editMessage.setText("–í—ã–±–µ—Ä–∏—Ç–µ —Å–µ–º–µ—Å—Ç—Ä –∏–∑ —Å–ø–∏—Å–∫–∞");

        InlineKeyboardMarkup markupInline = new InlineKeyboardMarkup();
        List<List<InlineKeyboardButton>> listOfButtons = new ArrayList<>();

        for (int i = 8; i > 0; i--) {
            List<InlineKeyboardButton> lineOfButtons1 = new ArrayList<>();
            InlineKeyboardButton inlineKeyboardButton = new InlineKeyboardButton();
            inlineKeyboardButton.setText("–°–µ–º–µ—Å—Ç—Ä ‚Ññ" + i);
            inlineKeyboardButton.setCallbackData("/semester_" + i);
            lineOfButtons1.add(inlineKeyboardButton);

            listOfButtons.add(lineOfButtons1);
        }

        List<InlineKeyboardButton> lineOfButtons1 = new ArrayList<>();
        InlineKeyboardButton inlineKeyboardButton1 = new InlineKeyboardButton();
        inlineKeyboardButton1.setText("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é");
        inlineKeyboardButton1.setCallbackData("/menu");
        lineOfButtons1.add(inlineKeyboardButton1);
        listOfButtons.add(lineOfButtons1);

        markupInline.setKeyboard(listOfButtons);
        editMessage.setReplyMarkup(markupInline);

        producerService.produceEditAnswer(editMessage);
    }

    private void semesterProcess(int semesterNumber, Long chatId, Integer messageId) {
        var editMessageText = new EditMessageText();
        editMessageText.setChatId(chatId);
        editMessageText.setMessageId(messageId);

        editMessageText.setParseMode("MarkdownV2");

        StringBuilder stringBuilder = new StringBuilder();
        stringBuilder.append(String.format("*__–í–∞—à–∏ –æ—Ü–µ–Ω–∫–∏ –∑–∞ %d —Å–µ–º–µ—Å—Ç—Ä:__*\n\n", semesterNumber));
        for (int i = 1; i < 4; i++) {
            stringBuilder.append(String.format("                    *%s*:\n" +
                                               "            –ê—Ç—Ç1:  *%s*,    –ê—Ç—Ç2:  *%s*,    –ê—Ç—Ç3:  *%s*,\n" +
                                               "–ü–æ—Å–µ—â–∞–µ–º–æ—Å—Ç—å:  *%s*,   –ò—Ç–æ–≥:  *%s*",
                    "–ò–Ω–æ—Å—Ç—Ä–∞–Ω–Ω—ã–π —è–∑—ã–∫:",
                    "50" != null ? "_50_" : "~   ~", "50" != null ? "_50_" : "~   ~", null != null ? "_50_" : "~   ~",
                    "100" != null ? "_100_" : "~   ~", "100" != null ? "_100\\(–û—Ç–ª–∏—á–Ω–æ\\)_" : "~   ~"));
            stringBuilder.append("\n\n");
        }
        editMessageText.setText(stringBuilder.toString());

        if (semesterNumber == 1) {
            editMessageText.setText("–í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –ø—Ä–æ—Å–º–æ—Ç—Ä –æ—Ü–µ–Ω–æ–∫ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω");
        }

        InlineKeyboardMarkup markupInline = new InlineKeyboardMarkup();
        List<List<InlineKeyboardButton>> listOfButtons = new ArrayList<>();

        List<InlineKeyboardButton> lineOfButtons1 = new ArrayList<>();
        InlineKeyboardButton inlineKeyboardButton1 = new InlineKeyboardButton();
        inlineKeyboardButton1.setText("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é");
        inlineKeyboardButton1.setCallbackData("/menu");
        lineOfButtons1.add(inlineKeyboardButton1);
        listOfButtons.add(lineOfButtons1);

        markupInline.setKeyboard(listOfButtons);
        editMessageText.setReplyMarkup(markupInline);

        producerService.produceEditAnswer(editMessageText);
    }

    private void toggleNotificationProcess(Long chatId, Integer messageId) {
        var editMessageText = new EditMessageText();
        editMessageText.setChatId(chatId);
        editMessageText.setMessageId(messageId);
        editMessageText.setText("–í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã");

        InlineKeyboardMarkup markupInline = new InlineKeyboardMarkup();
        List<List<InlineKeyboardButton>> listOfButtons = new ArrayList<>();

        List<InlineKeyboardButton> lineOfButtons1 = new ArrayList<>();
        InlineKeyboardButton inlineKeyboardButton1 = new InlineKeyboardButton();
        inlineKeyboardButton1.setText("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é");
        inlineKeyboardButton1.setCallbackData("/menu");
        lineOfButtons1.add(inlineKeyboardButton1);
        listOfButtons.add(lineOfButtons1);

        markupInline.setKeyboard(listOfButtons);
        editMessageText.setReplyMarkup(markupInline);

        producerService.produceEditAnswer(editMessageText);
    }
}